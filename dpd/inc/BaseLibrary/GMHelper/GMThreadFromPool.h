#pragma once
#include "GMThreadEx.h"
#include "GMSingleTon.h"
#include "GMRWLock.h"
//#include "AverageCounterByTime.h"
#include "FQueue.h"
/*
Ô¤ï¿½È´ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ß³Ì¡ï¿?
ï¿½ï¿½ï¿½Øµï¿½ï¿½ß³ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½delete,ï¿½ß³Ì´Ó³ï¿½ï¿½ï¿½È¡ï¿½ï¿½ï¿½Ë¾Í²ï¿½ï¿½Ú¹é»¹ï¿½Ë¡ï¿½
*/
template<class ThreadOwner>
class GMThreadPool:public GMSingleTon<GMThreadPool<ThreadOwner> >
{
	typedef void (ThreadOwner::*GMThreadFromPoolThreadProc)(void* );

	friend class  GMSingleTon<GMThreadPool>;

public:
	/*ï¿½È´ï¿½ï¿½ï¿½Ò»Ð©ï¿½ß³ï¿½
	ï¿½É¹ï¿½ï¿½ï¿½ï¿½ï¿½0,-1ï¿½ï¿½Ê¾ï¿½Ø¸ï¿½ï¿½ï¿½ï¿½ï¿½init -2ï¿½ï¿½Ê¾ï¿½í²ší¿´ï¿½ï¿½ï¿½ï¿½ß³ï¿½ï¿½ß³ï¿½Ê§ï¿½ï¿½
	thread_stack_sizeï¿½ï¿½ï¿½ï¿½0 Ê¹ï¿½ï¿½Ä¬ï¿½Ï´ï¿½Ð¡
	*/
	int init(unsigned int pre_created_thread_num,unsigned int thread_stack_size = 0);

	//ï¿½ï¿½ï¿½Ù¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Î´Ê¹ï¿½Ãµï¿½ï¿½ß³ï¿½
	void uninit();

	//ï¿½Ó¶ï¿½ï¿½ï¿½ï¿½ï¿½È¡Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªï¿½Õ£ï¿½ï¿½ò´´½ï¿½Ò»ï¿½ï¿½
	GMThreadEx<ThreadOwner>* create(ThreadOwner* owner,GMThreadFromPoolThreadProc proc);

private:
	GMThreadPool():m_thread_stack_size(0),m_pre_created_thread_num(0),m_notEnoughThreadEvent(true,true),m_bWorking(false){}

	void createThreadProc(void* );
private:

	typedef FQueue<GMThreadEx<ThreadOwner>* > ThreadList;
	unsigned int m_thread_stack_size;
	unsigned int m_pre_created_thread_num;
	GMLock m_threadPoolLock;
	ThreadList m_threadPool;
	
	GMRWLock m_bWorkingLock;
	bool m_bWorking;

	GMThreadEx<GMThreadPool>  m_createThreadThread;
	GMSysEvent m_notEnoughThreadEvent;

	//AverageCounterByTime 
};

template<class ThreadOwner>
int GMThreadPool<ThreadOwner>::init(unsigned int preCreatedThreadNum,unsigned int thread_stack_size)
{
	GMAutoLock<GMRWLock> al(&m_bWorkingLock,GMWriteOperator);

	if (m_bWorking)return -1;

	m_bWorking = true;

	m_pre_created_thread_num = preCreatedThreadNum;
	m_thread_stack_size = thread_stack_size;

	if(!m_threadPool.init(m_pre_created_thread_num*2))//ï¿½Å´ï¿½Ò»ï¿½ã£¬ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½ï¿½Ç¹Ì¶ï¿½ï¿½ï¿½
		return -2;

	if(!m_createThreadThread.create())
		return -3;

	m_createThreadThread.run(&GMThreadPool<ThreadOwner>::createThreadProc,this,NULL);

	return 0;
}

template<class ThreadOwner>
void GMThreadPool<ThreadOwner>::uninit() 
{
	GMAutoLock<GMRWLock> al(&m_bWorkingLock,GMWriteOperator);

	if(!m_bWorking)return;

	m_bWorking = false;
	m_notEnoughThreadEvent.signal();
	m_createThreadThread.waitThreadExit();


	GMThreadEx<ThreadOwner>* pThread = NULL;
	GMAutoLock<GMLock> al2(&m_threadPoolLock);
	while(m_threadPool.pop_front(pThread))
	{
		pThread->run(NULL,NULL,NULL);
		pThread->waitThreadExit();
		delete pThread;
	}

	m_threadPool.uninit();
}

template<class ThreadOwner>
GMThreadEx<ThreadOwner>* GMThreadPool<ThreadOwner>::create(ThreadOwner* owner,GMThreadFromPoolThreadProc proc)
{
	GMAutoLock<GMRWLock> al(&m_bWorkingLock,GMReadOperator);
	if(!m_bWorking)return NULL;

	GMThreadEx<ThreadOwner>* pThread = NULL;

	{
		GMAutoLock<GMLock> al(&m_threadPoolLock);
	
		if (m_threadPool.pop_front(pThread))
			pThread->run(proc,owner,NULL);

		if (m_threadPool.size() < 2*m_pre_created_thread_num / 3)//ï¿½ï¿½ï¿½ï¿½signalï¿½ï¿½ï¿½ï¿½
			m_notEnoughThreadEvent.signal();

		if (NULL != pThread)
			return pThread;
	}

	//printf("%d fail to get thread from pool\r\n",GetCurrentThreadId());

	pThread = new  GMThreadEx<ThreadOwner>();

	if (NULL == pThread)
		return NULL;

	if(!pThread->create(m_thread_stack_size))
	{
		delete pThread;
		return NULL;
	}

	pThread->run(proc,owner,NULL);

	return pThread;
}

template<class ThreadOwner>
void GMThreadPool<ThreadOwner>::createThreadProc(void* )
{
	GMThreadEx<ThreadOwner>* pThread = NULL;

	while(m_bWorking)
	{
		m_notEnoughThreadEvent.wait();

		while(true)
		{
			if(!m_bWorking)return;

		/*	{
				GMAutoLock<GMLock> al(&m_threadPoolLock);

				if(m_threadPool.size() >= m_pre_created_thread_num)
					break;
			}*/

			pThread = new  GMThreadEx<ThreadOwner>();
			if (NULL == pThread)
			{
				Sleep(100);
				continue;;
			}

			//U32 bt = GetTickCount();

			if(!pThread->create(m_thread_stack_size))
			{
				delete pThread;
				pThread = NULL;
				Sleep(100);
				continue;
			}
			
	/*		U32 interval = GetTickCount() - bt;
			if (interval>0)
				printf("%d create takes %d\n",GetCurrentThreadId() ,interval);*/

			{
				GMAutoLock<GMLock> al(&m_threadPoolLock);
			
				if(!m_threadPool.push_back(pThread))
				{
					printf("GMThreadPool<ThreadOwner>::createThreadProc push_back logic error,please tell yecw\r\n");

					assert(false);//ï¿½ï¿½ï¿½ï¿½ï¿½Üµï¿½ï¿½ßµï¿½ï¿½ï¿½Â·ï¿½ï¿½
					pThread->run(NULL,NULL,NULL);
					pThread->waitThreadExit();
					delete pThread;
					break;
				}

				if(m_threadPool.size() >= m_pre_created_thread_num)
					break;
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////

class  GMThreadFromPool
{
public:

	GMThreadFromPool( bool isWaitForRun = false):m_thread(NULL)
	{

	}
	
	virtual ~GMThreadFromPool()
	{
		if (m_thread)delete m_thread;
	}
	
	//ï¿½ï¿½ï¿½Ü¶ï¿½ï¿½Îµï¿½ï¿½ï¿½
	bool run()
	{
		m_thread = GMThreadPool<GMThreadFromPool>::GetInst()->create(this,&GMThreadFromPool::internalThreadProc);
		return NULL != m_thread;
	}

	void shutdown()
	{
		if (m_thread)
			m_thread->kill();
	}

	//Ê§ï¿½Ü·ï¿½ï¿½ï¿½0
#ifdef WIN32
	HANDLE getHandle()
	{
		if (m_thread)
			return m_thread->getHandle();
		else
			return NULL;
	};
#endif
	/*
	*	ï¿½È´ï¿½ï¿½ß³ï¿½ï¿½Ë³ï¿½. <runï¿½ï¿½ï¿½Øºï¿½ï¿½Å¿ï¿½Ö´ï¿½ÐµÈ´ï¿½>
	 */
	bool waitThreadExit(unsigned long time = INFINITE)
	{
		if (m_thread)
			return m_thread->waitThreadExit(time);
		else
			return true;
	}
#ifdef WIN32
	DWORD getThreadID()
#else
	pthread_t getThreadID()
#endif
	{
		if (m_thread)
			return m_thread->getThreadID().m_threadId;
		else
			return 0;
	};

protected:	
	/*
	 *	ï¿½ß³Ìºï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½OVERWRITEï¿½Ãºï¿½ï¿½ï¿½
	 */
	virtual unsigned long threadProc(void) = 0;	

private:
	void internalThreadProc(void* )//ï¿½ï¿½ï¿½ï¿½ï¿½ÐµÄ¼ï¿½ï¿½Ý£ï¿½×ªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô­ï¿½ï¿½
	{
		threadProc();
		//printf("GMThreadFromPool %d, handle %d.\r\n",getThreadID(),getHandle());
	}

private:
	GMThreadEx<GMThreadFromPool>* m_thread;
};

typedef GMThreadPool<GMThreadFromPool> ThreadPoolForGMThreadFromPool;
